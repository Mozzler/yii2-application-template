# -- Most of these were migrated to .platform/hooks which is the better Linux AMI 2 option as per https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/platforms-linux-extend.html
# Elastic Beanstalk Amazon Linux 2 platforms support: a Procfile, .ebextensions configuration files, custom hooks, and proxy configuration files.
#  Application example with extensions
#  ~/drivible/
#    |-- composer.json
#    |-- Procfile
#    |-- readme.md
#    |-- .ebextensions/
#    |   |-- options.config        # Option settings
#    |   `-- cloudwatch.config     # Other .ebextensions sections, for example files and container commands
#    |
#    | # == Proxy configuration
#    `-- .platform/
#        |-- nginx/
#        |   |-- nginx.conf
#        |   `-- conf.d/
#        |       `-- custom.conf
#        |
#        |  # == Application deployment hooks
#        |-- hooks/
#        |   |-- prebuild/ # === These are run first, but after the "commands:" have been run and then the application extracted but still done before the app or NGINX proxy are configured
#        |   |   |-- 01_set_secrets.sh
#        |   |   `-- 12_update_permissions.sh
#        |   |-- predeploy/ # == These are run after the container_commands and NGINX proxy overrides
#        |   |   `-- 01_some_service_stop.sh
#        |   `-- postdeploy/ # These are run last
#        |       |-- 01_set_tmp_file_permissions.sh
#        |       |-- 50_run_something_after_app_deployment.sh
#        |       `-- 99_some_service_start.sh
#        |
#        |  # == Configuration deployment hooks
#        `-- confighooks/
#        |-- prebuild/
#        |   `-- 01_set_secrets.sh
#        |-- predeploy/
#        |   `-- 01_some_service_stop.sh
#        `-- postdeploy/
#        |-- 01_run_something_after_config_deployment.sh
#        `-- 99_some_service_start.sh
files:
  "/tmp/run-server.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/sh

      # Used by the cronjob to ensure the tensorflow server is running
      # This server is just for locally downloading and caching the Client Tensorflow models
      HOSTNAME=localhost
      RESULT=`nc -z localhost 5000`

      if [[ $RESULT =~ "succeeded!" ]]
      then
        echo "Server is running. Do nothing."
      else
        echo "Server is not running. Restart"
        sudo su ec2-user
        cd /var/app/current/tensorflowServer
        npm install
        npm run server
      fi
  "/home/ec2-user/.bash_aliases":
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content: |
      alias app="cd /var/app/current"
      alias aliasd='nano ~/.bash_aliases; source ~/.bash_aliases'
      alias bashrc='nano ~/.bashrc;  source ~/.bashrc'
      alias da='sudo du -hsc *'
      alias das='du -cks * 2>/dev/null | sort -rn | while read size fname; do for unit in k M G T P E Z Y; do if [  -lt 1024 ]; then echo -e "\t"; break; fi; size=0; done; done;'
      alias dir='ls --color=auto --format=vertical'
      alias ll='ls -Alsch --color=auto'
      alias logs='find /var/log/ /var/app/current/runtime/logs/ -name "*.log" -type f -exec tail -n 1 -f {} +'
      alias mem='free -m'
      alias rm='rm -v'
      alias ifconfigNet='curl checkip.amazonaws.com'
      LS_COLORS='no=00:fi=00:di=01;35:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.flac=01;35:*.mp3=01;35:*.mpc=01;35:*.ogg=01;35:*.wav=01;35:';
      export LS_COLORS

      alias aps='sudo dpkg --get-selections'
      alias apt='sudo apt-get install'
      alias a2r='sudo service apache2 reload'
      alias a2rr='sudo service apache2 restart'
      alias nxr='sudo service nginx reload'
      alias nxrr='sudo service nginx restart'
      alias cdetca='cd /etc/apache2/sites-available'
      alias cdwww='cd /var/www/'
      alias das='du -cks * 2>/dev/null | sort -rn | while read size fname; do for unit in k M G T P E Z Y; do if [ $size -lt 1024 ]; then echo -e "${size}${unit}\t${fname}"; break; fi; size=$((size/1024)); done; done;'
      alias directoryExec='sudo find * -type d -exec chmod -c ug+x {} \;'
      alias directoryRWX='find * -type d -exec chmod -c ug+rwx {} \;'
      alias ds='du -hsc * | sort -n'
      alias egrep='egrep --color=auto'
      alias fgrep='fgrep --color=auto'
      alias grep='grep --color=auto'
      alias l='ls -CF'
      alias la='ls -A --color=auto'
      alias load='uptime'
      alias logs='find /var/log/ /var/app/current -name "*.log" -type f -exec tail -n 1 -f {} +'
      alias logsErrors='find /var/log/ -name "error.log" -type f -exec tail -f {} +'
      alias logsudo='sudo find /var/log/ /var/app/current -name "*.log" -type f -exec sudo tail -f {} +'
      alias ls='ls --color=auto'
      alias mailTestToDrivible='echo "This is a Test email from $HOSTNAME." | mail -s "Test email" "drivible.dev@drivible.com.au"'
      alias mem='free -m'
      alias netstats='sudo netstat -tulpn'
      alias openz='gzip -d -c'
      alias rm='rm -v'
      alias screenDetach='echo Press [ctrl]+ a, d to detach. Screen -list to view and screen -r to reattach'
      alias ssh-config='nano ~/.ssh/config'
      alias ubuntuVersion='cat /etc/*-release'
      alias linuxVersion='cat /etc/*-release'
      alias netGraph='slurm -i eth0'
      alias ifconfigNetAll='curl ifconfig.me/all'

      ## Set the default directory
      if [ -d "/var/app/current" ]; then
       cd /var/app/current
      fi

#  "/tmp/deploy-tensorflow-cron.sh":
#    mode: "000755"
#    owner: root
#    group: root
#    content: |
#      #!/bin/sh
#      # chmod 644 /etc/cron.d/drivible
#      /sbin/service crond restart
#
#      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
#      cd tensorflowScript
#      sudo npm install --scripts-prepend-node-path
#container_commands:
#  10-deploy-cron:
#    command: sh /tmp/deploy-tensorflow-cron.sh